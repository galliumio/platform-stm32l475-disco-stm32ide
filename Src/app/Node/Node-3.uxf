<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <help_text>// Uncomment the following line to change the fontsize and font:
fontsize=11
fontfamily=Monospaced //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>13</zoom_level>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>104</x>
      <y>0</y>
      <w>1469</w>
      <h>1430</h>
    </coordinates>
    <panel_attributes>Connected
--
valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>208</x>
      <y>143</y>
      <w>1261</w>
      <h>598</h>
    </coordinates>
    <panel_attributes>Normal
--
entry/ start pingReqTimer(3s, PERIODIC)
exit/ stop pingReqTimer, stop pingCfmTimer

PING_REQ_TIMER/ m_pingTime = current time, 
                m_pingSeq = GEN_SEQ(),
                SendMsg(SrvPingReqMsg, m_srvId, m_pingSeq)
                start pingCfmTimer(600ms, ONCE)

NODE_PARSER_MSG_IND[SrvPingCfmMsg]
/ if (seq == m_pingSeq &amp;&amp; success) stop pingCfmTimer
NODE_PARSER_MSG_IND[other msg recognized]
/ evt = HandleMsg(ind, to)
  Send(evt, to)

LEVEL_METER_CONTROL_CFM,
LEVEL_METER_DATA_IND
/ msg = get message from event
  SendMsg(msg)
valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>208</x>
      <y>1040</y>
      <w>1261</w>
      <h>312</h>
    </coordinates>
    <panel_attributes>RecoveryWait
--
entry/ start recoveryWaitTimer(5s)
exit/ stop recoveryWaitTimer
RECOVERY_WAIT_TIMER/ Raise(SRV_ERROR)
NODE_PARSER_MSG_IND[SrvPingCfmMsg]
/ if (seq == m_pingSeq &amp;&amp; success)
    if (rsp time &lt; 400ms) Raise(RECOVERED)
    else 
      m_pingTime = current time, 
      m_pingSeq = GEN_SEQ(),
      SendMsg(SrvPingReqMsg, m_srvId, m_pingSeq)

TODO - Add handling of events from other HSM.
       For critical msgs, defer them.
       For reoccurring status msgs, discard and
       sands fail cfm.
valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>1118</x>
      <y>884</y>
      <w>156</w>
      <h>39</h>
    </coordinates>
    <panel_attributes>PING_CFM_TIMER
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1092</x>
      <y>728</y>
      <w>39</w>
      <h>338</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;240.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>572</x>
      <y>728</y>
      <w>39</w>
      <h>338</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;240.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>481</x>
      <y>884</y>
      <w>117</w>
      <h>39</h>
    </coordinates>
    <panel_attributes>RECOVERED
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLSpecialState</id>
    <coordinates>
      <x>780</x>
      <y>91</y>
      <w>26</w>
      <h>26</h>
    </coordinates>
    <panel_attributes>type=initial
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>793</x>
      <y>91</y>
      <w>117</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;
group=1</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0;70.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>611</x>
      <y>338</y>
      <w>325</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>HandleMsg() checks for known msgs
in ind. If found, it creates a 
MsgEvt to carry the msg to the 
destination HSM. 
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>611</x>
      <y>442</y>
      <w>325</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>SendMsg writes a message to
m_dataOutFifo. If success and
fifo was empty, it sends
WIFI_WRITE_REQ to WIFI.
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
